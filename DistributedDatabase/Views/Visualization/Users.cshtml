@model IEnumerable<User>
@using System;
@{
    ViewData["Title"] = "Users";
}


@section DevelopmentEnvironment {
    <link rel="stylesheet" href="~/lib/kendo-ui/styles/kendo.common.min.css" />
    <link rel="stylesheet" href="~/lib/kendo-ui/styles/kendo.metro.min.css" />
    <script src="~/lib/kendo-ui/js/kendo.all.min.js"></script>
    <script src="~/lib/kendo-ui/js/cultures/kendo.culture.ru-RU.min.js"></script>
    <script src="~/lib/kendo-ui/js/kendo.aspnetmvc.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/jszip/2.4.0/jszip.min.js"></script>
}

<h2>Users</h2>
<div class="demo-section k-content">
    @(Html.Kendo()
    .TabStrip()
    .Name("tabstrip")
    .Animation(animation =>
        animation.Open(effect =>
            effect.Fade(FadeDirection.In)))
    .Items(tabstrip =>
    {
    tabstrip.Add()
            .Text("Таблица")
            .Selected(true)
            .Content(x =>
                Html.Kendo().Grid(Model)
                    .Name("Пользователи")
                    .ToolBar(tools => tools.Pdf())
                    .Pdf(pdf => pdf
                        .AllPages()
                        .AvoidLinks()
                        .PaperSize("A4")
                        .Margin("2cm", "1cm", "1cm", "1cm")
                        .Landscape()
                        .RepeatHeaders()
                        .TemplateId("page-template")
                        .FileName("acount_manager/user.pdf")
                        .ProxyURL(Url.Action("PDF_Export_Save", "Grid"))
                    )
                    .ToolBar(tools => tools.Excel())
                    .Excel(excel => excel
                        .FileName("Kendo UI Grid Export.xlsx")
                        .Filterable(true)
                        .ProxyURL(Url.Action("Excel_Export_Save", "Grid"))
                    )

                    .Columns(columns =>
                    {
                        columns.Bound(p => p.Login).Title("Login").Width(100);
                        columns.Bound(p => p.Email).Title("Email").Width(130);
                        columns.Bound(p => p.DateOfBirth).Title("DateOfBirth").Width(130);
                        columns.Bound(p => p.Country).Title("Country").Width(130);
                    })
                    .Sortable()
                    .Scrollable(scr => scr.Height(430))
                    .Filterable()
                    .DataSource(dataSource => dataSource
                        .Ajax()
                        .PageSize(20)
                        .ServerOperation(false)
                     )
                );
    tabstrip.Add()
            .Text("График")
            .Content(@<div class="chart">
                    @(Html.Kendo().Chart(Model)
                    .Name("chart")
                    .Title(title => title
                        .Text("Возраст игроков")
                        .Position(ChartTitlePosition.Bottom)
                        )
                    .Legend(legend => legend
                        .Position(ChartLegendPosition.Left)
                        )
                    .Series(series =>
                    {
                        series.Pie(new dynamic[] {
                            new {
                                category ="< 20 лет",
                                value = 100*Model.Where(user =>
                                    (DateTime.UtcNow.Year - user.DateOfBirth.Year) <= 20).Count()/Model.Count(),
                                color ="#9de219"
                            },
                            new {
                                category ="20-30 лет",
                                value = 100*Model.Where(user =>
                                    (DateTime.UtcNow.Year - user.DateOfBirth.Year) > 20 &&
                                    (DateTime.UtcNow.Year - user.DateOfBirth.Year) <= 30)
                                        .Count()/Model.Count(),
                                color ="#90cc38"
                            },
                            new
                            {
                                category = "30-40 лет",
                                value = 100*Model.Where(user =>
                                    (DateTime.UtcNow.Year - user.DateOfBirth.Year) > 30 &&
                                    (DateTime.UtcNow.Year - user.DateOfBirth.Year) <= 40).Count()/Model.Count(),
                                color = "#068c35"
                            },
                            new
                            {
                                category = "> 40 лет",
                                value = 100*Model.Where(user =>
                                     (DateTime.UtcNow.Year - user.DateOfBirth.Year) > 40).Count()/Model.Count(),
                                color = "#006634"
                            }
                        })
                        .Labels(labels => labels
                            .Template("#= category #: \n #= value#%")
                            .Background("transparent")
                            .Visible(true)
                        )
                        .StartAngle(150);
    })
                    .Tooltip(tooltip => tooltip
                        .Template("${ category } - ${ value }%")
                        .Visible(true)

                    )


                    )
                </div>
                );
        tabstrip.Add()
            .Text("Дополнительные элементы")
            .Content(x => Html.Kendo().Button()
                            .Name("showPopupNotification")
                            .Content("Всплывающее уведомление")
            );
        })
     )
</div>

@(Html.Kendo().Notification()
    .Name("popupNotification")
)

<script>
    $(document).ready(function() {
        var popupNotification = $("#popupNotification").data("kendoNotification");

        $("#showPopupNotification").click(function () {
            var d = new Date();
            popupNotification.show(kendo.toString(d, 'HH:MM:ss.') + kendo.toString(d.getMilliseconds(), "000"), "error");
        });
    });
</script>